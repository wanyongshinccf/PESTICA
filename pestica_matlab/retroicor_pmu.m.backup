function [RESP CARD] = retroicor_pmu(ep2d_filename,mask_filename,SN, CARD, RESP,polortMat,OPTIONS)
% function matlab_retroicor(ep2d_filename,mask_filename,SN, CARD, RESP,polortMat)
% This function performs the 2nd-order RETROICOR algorithm on an epi dataset
% with physioloc noise model regressors and returns couupling coefficients 
% and the statistical significance. 

% RVT model (Birn et al., 2007) is implemnted when running RetroTS.m
% modification is needed to run RVT

% RVHR(*HRF) are impleneted modifed from Catie Chang's code
% catie chang,   catie.chang@vanderbilt.edu
% Chang et al., 2009: Neuroimage 47, 1448-1459 (appendix A)
% Chang et al., 2009: Neuroimage 44, 857-869

% default is RETROICOR ONLY
if ~exist('OPTIONS', 'var');  OPTIONS.RVHR = 0; end
% PMU  flag setting
pmuQAflag = 1;
% Default; M=2
if (exist('M','var')==0); M=2; end 

% check RETROICOR data format
if ~isfield(RESP, 'phz_slc_reg') 
   disp('ERROR: Respiratory PMU data is not valid for running RETROICOR') 
   disp('       Check respiratory PMU data')
   disp('       PESTICA is suggested to remove physiologic noise')
   disp(' ')
   return
elseif ~isfield(CARD, 'phz_slc_reg') 
   disp('ERROR: Cardiac PMU data is not valid for running RETROICOR')  
   disp('       Check cardiac PMU data')
   disp('       PESTICA is suggested to remove physiologic noise')
   disp(' ')
   return
end

% define bucket template
strpath = which('retroicor_pmu');
retroicordir = strpath(1:strfind(strpath,'/retroicor_pmu'));
pmubuckettemplate = [retroicordir '/PMUM' num2str(M) '_bucket+orig.HEAD'];
irfbuckettemplate = [retroicordir '/PESTICA_bucket+orig.HEAD'];

% read EPI data
Opt.Format = 'matrix';
[err, ima, ainfo, ErrMessage]=BrikLoad(ep2d_filename, Opt);
xdim=ainfo.DATASET_DIMENSIONS(1);
ydim=ainfo.DATASET_DIMENSIONS(2);
zdim=ainfo.DATASET_DIMENSIONS(3);
tdim=ainfo.DATASET_RANK(2);
TR=1000*double(ainfo.TAXIS_FLOATS(2));
[TRsec TRms] = TRtimeunitcheck(TR);

% read or define mask
[err,mask,minfo,ErrMessage]=BrikLoad(mask_filename, Opt);
mask = mask(:,:,:,1);  mask(find(mask~=0))=1;

% read polinomial signal drift vectors
polort_reg = load(polortMat);
  
% Arvt = RESP.RVTRS_slc; % not used for RVT
if OPTIONS.RVHR
  % defaults
  delta = 0;
  Twin = 6; % default 6-sec window for computing RV & HR

  % make slice RV*RRF regressor
  respwave = RESP.v-min(RESP.v);
  nresp = length(respwave);
  for kk = 1:tdim
    t = RESP.tst(kk);
    i1 = max(0,floor((t - Twin*.5)*SN.ResampFS)); 
    i2 = min(nresp, floor((t + Twin*.5)*SN.ResampFS));
    if (i2<i1)
      error('respiration data is shorter than length of scan');
    end
    if i1==0;  i1 = i1+1; end
    rv(kk) = std(respwave(i1:i2));
  end
  rv = rv(:);
  
  % conv(rv, rrf)
  rv = rv-mean(rv);
  t = [0:TRsec:40-TRsec]; % 40-sec impulse response
  R = 0.6*(t.^2.1).*exp(-t/1.6) - 0.0023*(t.^3.54).*exp(-t/4.25); 
  R = R/max(R);
  rv_rrf = conv(rv,R);
  rv_rrf = rv_rrf(1:length(rv));
  
  % time derivative
  rv_rrf_d = diff(rv_rrf);
  rv_rrf_d = [rv_rrf_d(1); rv_rrf_d];
  RVreg = [rv_rrf, rv_rrf_d];

  % quaddetrend_cols and normalization
  x = [1:size(RVreg,1)]';
  for j=1:size(RVreg,2)
    y = RVreg(:,j);
    p = polyfit(x,y,2);
    ytrend = polyval(p, x);
    y = y - ytrend;
    RVreg(:,j) = (y - mean(y))/std(y);
  end
  
  % make HR*CRF regressor
  for kk = 1:tdim
    etrig = CARD.tptrace;
    ntrig = length(etrig);
    t = CARD.tst(kk);
    inds = intersect(find(etrig>=(t-Twin*.5)), find(etrig<=(t+Twin*.5)));
    if isempty(inds)
      hr(kk) = 0;  
    else
      i1 = inds(1); i2 = inds(end);
      hr(kk) = (i2-i1)*60/(etrig(i2) - etrig(i1));  % bpm 
    end
  end
  hr = hr(:);
     
  % conv(hr, crf)
  hr = hr - mean(hr);
  t = [0:TRsec:40-TRsec];  % 40-sec impulse response
  H = 0.6*(t.^2.7).*exp(-t/1.6) - 16*normpdf(t,12,3);
  H = H/max(H);
  hr_crf = conv(hr,H);
  hr_crf = hr_crf(1:length(hr));
  
  % time derivative
  hr_crf_d = diff(hr_crf);
  hr_crf_d = [hr_crf_d(1); hr_crf_d];
  HRreg = [hr_crf, hr_crf_d];
  
  % quaddetrend_cols and normalization
  x = [1:size(HRreg,1)]';
  for j=1:size(HRreg,2)
    y = HRreg(:,j);
    p = polyfit(x,y,2);
    ytrend = polyval(p, x);
    y = y - ytrend;
    HRreg(:,j) = (y - mean(y))/std(y);
  end

  RESP.RVreg = RVreg;
  CARD.HRreg = HRreg;
  save('RetroTS.PMU.mat','SN','CARD','RESP')

  bmap = zeros(xdim,ydim,zdim,4*M+4);
  tmap = zeros(xdim,ydim,zdim,4*M+4);
  Fmap = zeros(xdim,ydim,zdim,5);
  disp('RVHR are regressed out in retroicor_pmu.m')
else
  bmap = zeros(xdim,ydim,zdim,4*M);
  tmap = zeros(xdim,ydim,zdim,4*M);
  Fmap = zeros(xdim,ydim,zdim,3);
  disp('Currently RVHR is NOT regressed out in retroicor_pmu.m')
  disp('if you want to consider low freq physio fluctuation, you need to set OPTIONS.RVHR to one in retroicor_pmu.m')
end

errtmap = zeros(xdim,ydim,zdim,tdim);
disp(['Voxelwise RETROICOR (M=' num2str(M) ') is running'])
tic
warning off
Ap = polort_reg; 
for z=1:zdim
  if OPTIONS.RVHR
    A  = [squeeze(RESP.phz_slc_reg(:,1:2*M,z)) squeeze(CARD.phz_slc_reg(:,1:2*M,z)) RVreg HRreg polort_reg];
  else
    A  = [squeeze(RESP.phz_slc_reg(:,1:2*M,z)) squeeze(CARD.phz_slc_reg(:,1:2*M,z)) polort_reg];
  end
  
  for y=1:ydim
    for x=1:xdim
      if mask(x,y,z)
        % normalizing
        errt=squeeze(ima(x,y,z,:));
        SD=std(errt);
        errt_norm = errt/SD;
      
        % solve linear regression
        [p, std_err]  = lscov(A, errt_norm);
        res = errt_norm - A*p;    RSS  = res'*res;
                
        if OPTIONS.RVHR
          bmap(x,y,z,:) = p(1:4*M+4);
          tmap(x,y,z,:) = p(1:4*M+4)./std_err(1:4*M+4);  
          p_errt=p; p(4*M+5) = 0;  
        else
          bmap(x,y,z,:) = p(1:4*M);
          tmap(x,y,z,:) = p(1:4*M)./std_err(1:4*M);
          p_errt=p; p(4*M+1) = 0;
        end
        
        % regress out physiologic noise, but keep the trending lines
        errt_errt = errt_norm - (A*p);
        errtmap(x,y,z,:) = errt_errt*SD;
        
        % additioanl F values for cardiac and respiratory regressors
        [pp,std_err] = lscov(Ap, errt_norm);
        res = errt_norm - Ap*pp;        RSSp = res'*res;
        if OPTIONS.RVHR
          Are =  [squeeze(CARD.phz_slc_reg(:,1:2*M,z)) RVreg HRreg polort_reg]; 
          [pre,std_err] = lscov(Are, errt_norm);
          res = errt_norm - Are*pre;      RSSr = res'*res;
          
          Ace =  [squeeze(RESP.phz_slc_reg(:,1:2*M,z)) RVreg HRreg polort_reg]; 
          [pce,std_err] = lscov(Ace, errt_norm);
          res = errt_norm - Ace*pce;      RSSc = res'*res;
          
          Arhe =  [squeeze(RESP.phz_slc_reg(:,1:2*M,z)) squeeze(CARD.phz_slc_reg(:,1:2*M,z)) HRreg polort_reg]; 
          [prhe,std_err] = lscov(Arhe, errt_norm);
          res = errt_norm - Arhe*prhe;      RSSrh = res'*res;
          
          Ache =  [squeeze(RESP.phz_slc_reg(:,1:2*M,z)) squeeze(CARD.phz_slc_reg(:,1:2*M,z)) RVreg polort_reg]; 
          [pche,std_err] = lscov(Ache, errt_norm);
          res = errt_norm - Ache*pche;      RSSch = res'*res;
        else
          Are = [squeeze(CARD.phz_slc_reg(:,1:2*M,z)) polort_reg];
          [pre,std_err] = lscov(Are, errt_norm);
          res = errt_norm - Are*pre;        RSSr = res'*res;
          
          Ace = [squeeze(RESP.phz_slc_reg(:,1:2*M,z)) polort_reg];
          [pce,std_err] = lscov(Ace, errt_norm);
          res = errt_norm - Ace*pce;        RSSc = res'*res; 
        end
        
        % F-test
        % F = {(RSS1 - RSS2)/(p2-p1)} / { RSS2/(n-p2) }
        % Model1: the restricted model 
        % Model2: the unrestricted (full) model
        % the variables (regressors) that are not included in Model1 are
        % our intesest to see how big chagne between RSS1 and RSS2
        % RSS1,2: residual sum of squres model1 or 2
        % p1,2  : number of regressor of model1 or 2 (p2 > p1)
        % n     : data point, here tdim
       if OPTIONS.RVHR
          Ff = (RSSp - RSS)/RSS * (tdim-size(A,2))/(4*M+4); 
          Fc = (RSSc - RSS)/RSS * (tdim-size(A,2))/(2*M); 
          Fr = (RSSr - RSS)/RSS * (tdim-size(A,2))/(2*M); 
          Frh = (RSSrh - RSS)/RSS * (tdim-size(A,2))/(2); 
          Fch = (RSSch - RSS)/RSS * (tdim-size(A,2))/(2); 
          Fmap(x,y,z,1:5) = [Ff Fr Fc Frh Fch];
        else
          Ff = (RSSp - RSS)/RSS * (tdim-size(A,2))/(4*M); 
          Fc = (RSSc - RSS)/RSS * (tdim-size(A,2))/(2*M); 
          Fr = (RSSr - RSS)/RSS * (tdim-size(A,2))/(2*M); 
          Fmap(x,y,z,1:3) = [Ff Fr Fc];  
        end
      end
    end
  end
  if z==1
    fprintf('slice1')
  elseif z==zdim
    fprintf([num2str(zdim) '\n'])  
  else
    fprintf('.')
  end
end
disp(['Voxelwise RETROICOR (M=' num2str(M) ') is done'])
toc

% keep same format as input data
ainfo.BRICK_TYPES=3*ones(1,tdim); % 1=short, 3=float
ainfo.BRICK_STATS = []; %automatically set
ainfo.BRICK_FLOAT_FACS = [];%automatically set
ainfo.BRICK_LABS = [];
ainfo.BRICK_KEYWORDS = [];
OptOut.Scale = 0;
OptOut.OverWrite= 'y';
OptOut.verbose = 0;
OptOut.Prefix = [ep2d_filename(1:strfind(ep2d_filename,'+')-1) '.retroicor_pmu'];    
[err,ErrMessage,InfoOut]=WriteBrik(errtmap,ainfo,OptOut);

% generated bucket files
[err,binfo] = BrikInfo(pmubuckettemplate);
binfo.DATASET_DIMENSIONS(1:3) = ainfo.DATASET_DIMENSIONS(1:3);
binfo.DELTA = ainfo.DELTA;
binfo.IJK_TO_DICOM_REAL = ainfo.IJK_TO_DICOM_REAL;
binfo.Orientation = ainfo.Orientation;
binfo.ORIGIN = ainfo.ORIGIN;

bucket                  = zeros(xdim,ydim,zdim,size(Fmap,4)+size(bmap,4)+size(tmap,4)); % (cos,sine) x (card, resp) x (t or b)
bucket(:,:,:,1:size(Fmap,4))       = Fmap;
bucket(:,:,:,size(Fmap,4)+1:2:end) = bmap;
bucket(:,:,:,size(Fmap,4)+2:2:end) = tmap;  

blabel = 'Full_Fstat~Resp_Fstst~Card_Fstst';
if OPTIONS.RVHR
    blabel = [blabel '~RV_Fstat~HR_Fstat'];
end
blabel = [blabel '~RespSin#0_Coef~RespSin#0_Tstat~RespCos#0_Coef~RespCos#0_Tstat~RespSin#1_Coef~RespSin#1_Tstat~RespCos#1_Coef~RespCos#1_Tstat'];
blabel = [blabel '~CardSin#0_Coef~CardSin#0_Tstat~CardCos#0_Coef~CardCos#0_Tstat~CardSin#1_Coef~CardSin#1_Tstat~CardCos#1_Coef~CardCos#1_Tstat'];
if OPTIONS.RVHR
  blabel = [blabel '~RV_Coef~RV_Tstat~RVdev_Coef~RVdev_Tstat~HR_Coef~HR_Tstat~HRdev_Coef~HRdev_Tstat'];
end 
binfo.BRICK_LABS=blabel;

% stat aux definition
DOF = tdim-size(A,2);
if OPTIONS.RVHR
  bstataux = [0 4 2 4*M+4 DOF 1 4 2 2*M DOF 2 4 2 2*M DOF];
  bstataux = [bstataux 3 4 2 2 DOF 4 4 2 2 DOF];
  bstataux = [bstataux 6 3 1 DOF 8 3 1 DOF 10 3 1 DOF 12 3 1 DOF 14 3 1 DOF 16 3 1 DOF 18 3 1 DOF 20 3 1 DOF];
  bstataux = [bstataux 22 3 1 DOF 24 3 1 DOF 26 3 1 DOF 28 3 1 DOF];
else
  bstataux = [0 4 2 4*M DOF 1 4 2 2*M DOF 2 4 2 2*M DOF];  
  bstataux = [bstataux 4 3 1 DOF 6 3 1 DOF 8 3 1 DOF 10 3 1 DOF 12 3 1 DOF 14 3 1 DOF 16 3 1 DOF 18 3 1 DOF];
end
binfo.BRICK_STATAUX = bstataux;

% define option
OptOut.Scale = 0;
OptOut.OverWrite= 'y';
OptOut.verbose = 0;
OptOut.Prefix = [ep2d_filename(1:strfind(ep2d_filename,'+')-1) '.retroicor_pmu.bucket'];    
[err,ErrMessage,InfoOut]=WriteBrik(bucket,binfo,OptOut);

if pmuQAflag
  disp('PMU QA is running')
  % find the highest F value voxels
  fmapr = Fmap(:,:,:,2);
  fmapc = Fmap(:,:,:,3);

  if isfield(RESP, 'phz_slc_reg')
    % define physio-voxels (1%)
    [fdist_resp fbin_resp] = sort(fmapr(find(mask)));
    fthr_resp99=min(fdist_resp(fbin_resp(find(fbin_resp>0.99*sum(mask(:))))));
    rmask=zeros(xdim,ydim,zdim);  
    rmask(find(fmapr(:,:,:,1)>fthr_resp99))=1;

    % store coefficients in physio voxels
    rdata=linspace(-pi,pi,50);
    tmp =bmap(:,:,:,1); rb1=tmp(find(rmask)); % resp sine term
    tmp =bmap(:,:,:,2); ra1=tmp(find(rmask)); % resp cosine term
    tmp =bmap(:,:,:,3); rb2=tmp(find(rmask)); % resp sine term
    tmp =bmap(:,:,:,4); ra2=tmp(find(rmask)); % resp cosine term

    % calculate phase function without correction (Eqn[6] in cPESTICA paper)
    rt_raw  = zeros(sum(rmask(:)),50);
    for r = 1:sum(rmask(:))
      rt_raw(r,:) = ra1(r)*cos(rdata)   + rb1(r)*sin(rdata) + ...
                    ra2(r)*cos(2*rdata) + rb2(r)*sin(2*rdata) ; 
    end
    mean_rt_raw = mean(rt_raw);
    
    % caluclate polarity corrected phase function (Eqn[7] in cPESTICA paper)
    polcorflag=ones(sum(rmask(:)),1);
    rt_polcor = rt_raw;
    for  r = 1:sum(rmask(:))
      cc1 = corr(rt_raw(r,:)',mean_rt_raw');
      if cc1 < 0
        rt_polcor(r,:) = rt_raw(r,:)*-1;
        polcorflag(r)=-1;
      end
    end
    
    % phase shift calcutation 
    % Table 2 from the paper (Shin, Koenig & Lowe 2021)
    pir1 = atan2(ra1,rb1);
    % warp between -90 deg < < 90 deg 
    pir1_w1 = pir1;
    pir1_w1(find(pir1<-pi/2)) = pir1_w1(find(pir1<-pi/2))+pi;
    pir1_w1(find(pir1>+pi/2)) = pir1_w1(find(pir1>+pi/2))-pi;
    % find max
    xbins = -pi/2:pi/50:pi/2;
    pir1_w1_hist = hist(pir1_w1,xbins);
    [a maxbin] = max(pir1_w1_hist);
    peak_pir1_w1 = xbins(maxbin);
    % bound between peak_pir1_w1 +/- pi/2
    pir1_w2 = pir1;
    pir1_w2(find(pir1>peak_pir1_w1+pi/2)) = pir1_w2((pir1>peak_pir1_w1+pi/2))-pi;
    pir1_w2(find(pir1<peak_pir1_w1-pi/2)) = pir1_w2((pir1<peak_pir1_w1-pi/2))+pi;
    
    % save result
    RESP.hpfphz      = rdata;
    RESP.hpf_raw_mean    = mean(rt_raw); 
    RESP.hpf_raw_std     = std(rt_raw); 
    RESP.hpf_polcor_mean = mean(rt_polcor); 
    RESP.hpf_polcor_std  = std(rt_polcor); 
    RESP.hpf_phaSft_mean = mean(pir1_w2); 
    RESP.hpf_phaSft_std  = std(pir1_w2); 
  end

  if isfield(CARD, 'phz_slc_reg') 
    % define physio-voxels (1%)
    [fdist_card fbin_card] = sort(fmapc(find(mask)));
    fthr_card99=min(fdist_card(fbin_card(find(fbin_card>0.99*sum(mask(:))))));
    cmask=zeros(xdim,ydim,zdim);  cmask(find(fmapc(:,:,:,1)>fthr_card99))=1;
    
    % store coefficients in physio voxels
    cdata=linspace(0,2*pi,50);  
    tmp =bmap(:,:,:,1+4); cb1=tmp(find(cmask)); % card sine term
    tmp =bmap(:,:,:,2+4); ca1=tmp(find(cmask)); % card cosine term   
    tmp =bmap(:,:,:,3+4); cb2=tmp(find(cmask)); % card sine term
    tmp =bmap(:,:,:,4+4); ca2=tmp(find(cmask)); % card cosine term 
    
    % Fig2 of a paper (Shin, Koenig & Lowe, 2021) can be generated here 
    % h = figure('visible','off');
    % subplot(2,3,1);plot(ca1,cb1,'r.');subplot(2,3,2);plot(ca1,ca2,'r.');
    % subplot(2,3,3);plot(ca1,cb2,'r.');subplot(2,3,4);plot(cb1,ca2,'r.');
    % subplot(2,3,5);plot(cb1,cb2,'r.');subplot(2,3,6);plot(ca2,cb2,'r.');
    % saveas(gcf,['pmu_M' num2str(M) '_card_coeff.png']);
    % subplot(2,3,1);plot(ra1,rb1,'r.');subplot(2,3,2);plot(ra1,ra2,'r.');
    % subplot(2,3,3);plot(ra1,rb2,'r.');subplot(2,3,4);plot(rb1,ra2,'r.');
    % subplot(2,3,5);plot(rb1,rb2,'r.');subplot(2,3,6);plot(ra2,rb2,'r.');
    % saveas(gcf,['pmu_M' num2str(M) '_resp_coeff.png']); 
    
    % calculate phase function without correction (Eqn[6] in cPESTICA paper)
    ct_raw  = zeros(sum(cmask(:)),50);
    for c = 1:sum(cmask(:))
      ct_raw(c,:) = ca1(c)*cos(cdata)   + cb1(c)*sin(cdata) + ...
                    ca2(c)*cos(2*cdata) + cb2(c)*sin(2*cdata) ; 
    end
    mean_ct_raw = mean(ct_raw);
    
    % caluclate polarity corrected phase function (Eqn[7] in cPESTICA paper)
    polcorflag=ones(sum(cmask(:)),1);
    ct_polcor = ct_raw;
    for  c = 1:sum(cmask(:))
      cc1 = corr(ct_raw(c,:)',mean_ct_raw');
      if cc1 < 0
        ct_polcor(c,:) = ct_raw(c,:)*-1;
        polcorflag(c)=-1;
      end
    end
    
    % phase shift calcutation 
    % Table 2 from cPESTICA paper
    pic1 = atan2(ca1,cb1);
    % warp between -90 deg < < 90 deg 
    pic1_w1 = pic1;
    pic1_w1(find(pic1<-pi/2)) = pic1_w1(find(pic1<-pi/2))+pi;
    pic1_w1(find(pic1>+pi/2)) = pic1_w1(find(pic1>+pi/2))-pi;
    % find max
    xbins = -pi/2:pi/50:pi/2;
    pic1_w1_hist = hist(pic1_w1,xbins);
    [a maxbin] = max(pic1_w1_hist);
    peak_pic1_w1 = xbins(maxbin);
    % bound between peak_pic1_w1 +/- pi/2
    pic1_w2 = pic1;
    pic1_w2(find(pic1>peak_pic1_w1+pi/2)) = pic1_w2((pic1>peak_pic1_w1+pi/2))-pi;
    pic1_w2(find(pic1<peak_pic1_w1-pi/2)) = pic1_w2((pic1<peak_pic1_w1-pi/2))+pi;
    
    % save result
    CARD.hpfphz          = cdata;
    CARD.hpf_raw_mean    = mean(ct_raw); 
    CARD.hpf_raw_std     = std(ct_raw); 
    CARD.hpf_polcor_mean = mean(ct_polcor); 
    CARD.hpf_polcor_std  = std(ct_polcor); 
    CARD.hpf_phaSft_mean = mean(pic1_w2); 
    CARD.hpf_phaSft_std  = std(pic1_w2); 
  end

  % generate slice regressor Eqn[11] in cPESTICA paper
  CARD.hpf_slc_reg = zeros(tdim,zdim);
  RESP.hpf_slc_reg = zeros(tdim,zdim);

  % add phases to starts and ends
  rphz_add = [(RESP.hpfphz(end-9:end-1)-2*pi) RESP.hpfphz (RESP.hpfphz(2:10)+2*pi)];
  rhpf_add = [RESP.hpf_polcor_mean(end-9:end-1) ...
              RESP.hpf_polcor_mean ...
              RESP.hpf_polcor_mean(2:10)];
  cphz_add = [(CARD.hpfphz(end-9:end-1)-2*pi) CARD.hpfphz (CARD.hpfphz(2:10)+2*pi)];
  chpf_add = [CARD.hpf_polcor_mean(end-9:end-1) ...
              CARD.hpf_polcor_mean ...
              CARD.hpf_polcor_mean(2:10)];
            
  rhpf_add = rhpf_add/max(rhpf_add);
  chpf_add = chpf_add/max(chpf_add);
  
  for z=1:zdim
    CARD.hpf_slc_reg(:,z) = pchip(cphz_add,chpf_add,CARD.phz_slc(:,z));  
    RESP.hpf_slc_reg(:,z) = pchip(rphz_add,rhpf_add,RESP.phz_slc(:,z));  
  end
  
  % generate N/TR sampled phase function regressors
  % find slice shift timing
  slice_timing_sec = load('tshiftfile.1D');
  [MBacc zmbdim uniq_slice_timing_sec uniq_acq_order] = SMSacqcheck(TRsec, zdim, slice_timing_sec);

  % N slice / TR sampled regressor
  uniq_phz_slc = CARD.phz_slc(:,1:zmbdim);
  CARD.hpf_reg  = convert_slicextime_to_timeseries(uniq_phz_slc',uniq_acq_order);
  uniq_phz_slc = RESP.phz_slc(:,1:zmbdim);
  RESP.hpf_reg  = convert_slicextime_to_timeseries(uniq_phz_slc',uniq_acq_order);
  
  save('RetroTS.PMU.mat','SN','CARD','RESP')

  % save pmu regression out quality check
  h = figure('visible','off');
  if isfield(CARD, 'phz_slc_reg')
    subplot(2,3,1); plot(ca1,cb1,'r.');title('card Fourier model at physiovoxels');
                    xlim([-1.2 1.2]);ylim([-1.2 1.2])
                    xlabel('cosine coefficient');ylabel('sine coefficient');
    subplot(2,3,2); errorbar(CARD.hpfphz,CARD.hpf_raw_mean, CARD.hpf_raw_std,'k'); title('card HPF')
                    xlim([CARD.hpfphz(1)-0.5 CARD.hpfphz(end)+0.5]);ylim([-2 2]);
    subplot(2,3,3); errorbar(CARD.hpfphz,CARD.hpf_polcor_mean, CARD.hpf_polcor_std,'k'); title('card HPF +/-cor')
                    xlim([CARD.hpfphz(1)-0.5 CARD.hpfphz(end)+0.5]);ylim([-2 2]);               
  end
  if isfield(RESP, 'phz_slc_reg')
    subplot(2,3,4); plot(ra1,rb1,'r.');title('resp Fourier model at physiovoxels');
                    xlabel('cosine coefficient');ylabel('sine coefficient');
                    xlim([-1.2 1.2]);ylim([-1.2 1.2])
    subplot(2,3,5); errorbar(RESP.hpfphz,RESP.hpf_raw_mean, RESP.hpf_raw_std,'k'); title('RESP HPF')
                    xlim([RESP.hpfphz(1)-0.5 RESP.hpfphz(end)+0.5]);ylim([-2 2]);
    subplot(2,3,6); errorbar(RESP.hpfphz,RESP.hpf_polcor_mean, RESP.hpf_polcor_std,'k'); title('RESP HPF +/-cor')
                    xlim([RESP.hpfphz(1)-0.5 RESP.hpfphz(end)+0.5]);ylim([-2 2]);
  end
  saveas(gcf,['pmu_M' num2str(M) '_HRFcheck.png']);  

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The following for cPESTICA paper, not useful for your analysis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
irf_flag = 0;
if irf_flag 
  disp('Voxelwise pmu HPF regressor correction is running')
  tic
  
  % save for temp
  fp=fopen('card_pmu_hpf_reg.dat','w'); fprintf(fp,'%g\n',CARD.hpf_reg'); fclose(fp); 
  fp=fopen('resp_pmu_hpf_reg.dat','w'); fprintf(fp,'%g\n',RESP.hpf_reg'); fclose(fp); 
  
  % pestica5 add on
  samplingrate = zmbdim/TRsec;

  % calculate phase using RetroTS,
  SN=[];
  SN.Cardfile    = 'card_pmu_hpf_reg.dat';
  SN.ShowGraphs  = 0; 
  SN.VolTR       = TRsec; 
  SN.Nslices     = zdim; 
  SN.SliceOffset = slice_timing_sec;
  SN.SliceOrder  = 'Custom';
  SN.PhysFS      = samplingrate; 
  SN.Quiet       = 1; 
  SN.Prefix      = ['RetroTS.pmu.hpfreg']; 
  SN.RVT_out      = 0;
  [SN, RESP, CARDhpf] = RetroTS_ccf(SN);

  save('RetroTS.pmu.hpf.mat','SN','CARDhpf','RESP')
  
  % no errt or bucket file, just calculating F and RSS
  fmap = zeros(xdim,ydim,zdim,3);
  rmap = zeros(xdim,ydim,zdim,4);  
  for z=1:zdim
    if mod(z,zmbdim)
      zmb = mod(z,zmbdim); 
    else
      zmb = zmbdim;
    end
      
    Ac   = [squeeze(CARDhpf.phz_slc_reg(:,1:2*M,z)) polort_reg];   
    Ar   = [RESP.hpf_sli_reg(:,z) polort_reg];  
    A = [RESP.hpf_sli_reg(:,z) squeeze(CARDhpf.phz_slc_reg(:,1:2*M,z)) polort_reg];  
    % Ap is already defined
 
    for y=1:ydim
      for x=1:xdim
        if mask(x,y,z)
          % normalizing
          errt=squeeze(ima(x,y,z,:));
          SD=std(errt);
          errt_norm = errt/SD;
          
          % solve linear regression
          [p, std_err] = lscov(A, errt_norm);
          res = errt_norm - A*p;   RSS  = res'*res;
          [p, std_err] = lscov(Ac, errt_norm);
          res = errt_norm - Ac*p;  RSSc  = res'*res;
          [p, std_err] = lscov(Ar, errt_norm);
          res = errt_norm - Ar*p;  RSSr  = res'*res;

          % polort reg only
          [p,std_err] = lscov(Ap, errt_norm);
          res = errt_norm - Ap*p;    RSSp = res'*res;
          
          % F-test
          % F = {(RSS1 - RSS2)/(p2-p1)} / { RSS2/(n-p2) }
          % Model1: the restricted model 
          % Model2: the unrestricted (full) model
          % the variables (regressors) that are not included in Model1 are
          % our intesest to see how big chagne between RSS1 and RSS2
          % RSS1,2: residual sum of squres model1 or 2
          % p1,2  : number of regressor of model1 or 2 (p2 > p1)
          % n     : data point, here tdim
          fmap(x,y,z,1:3) = [(RSSp-RSSc)/RSSc*(tdim-size(Ac,2))/4 ...
                             (RSSp-RSSr)/RSSr*(tdim-size(Ar,2))/1 ...
                             (RSSp-RSS)/RSS*(tdim-size(A,2))/5 ];
          rmap(x,y,z,1:4) = [RSSp RSSc RSSr RSS].*SD^2;     
        end
      end
    end
    if z==1
      fprintf('slice1')
    elseif z==zdim
      fprintf([num2str(zdim) '\n'])  
    else
      fprintf('.')
    end
  end
  disp('voxelwise pmu hemodymic phase function regressor correction is done')
  toc
  
  % generated bucket files
  [err,binfo] = BrikInfo(pmubuckettemplate);
  binfo.DATASET_DIMENSIONS(1:3) = ainfo.DATASET_DIMENSIONS(1:3);
  binfo.DELTA = ainfo.DELTA;
  binfo.IJK_TO_DICOM_REAL = ainfo.IJK_TO_DICOM_REAL;
  binfo.Orientation = ainfo.Orientation;
  binfo.ORIGIN = ainfo.ORIGIN;
  
  binfo.DATASET_RANK=[3 3 0 0 0 0 0 0];
  binfo.BRICK_TYPES= [3*ones(1,3)];
  binfo.BRICK_LABS='Fstatc4~Fstatr1~Fstatc4r1';
  binfo.BRICK_STATAUX = [0 4 2 4 (tdim-size(Ac,2)) ...
                         1 4 2 1 (tdim-size(Ar,2)) ...
                         2 4 2 5 (tdim-size(A,2))];
  OptOut.Scale = 0;
  OptOut.OverWrite= 'y';
  OptOut.verbose = 0;
  OptOut.Prefix = [ep2d_filename(1:strfind(ep2d_filename,'+')-1) '.pmu.SynPESTICA.Fmap.bucket'];
  [err,ErrMessage,InfoOut]=WriteBrik(fmap,binfo,OptOut);
  
  % keep same format as input data
  ainfo.BRICK_TYPES=3*ones(1,4); % 1=short, 3=float
  ainfo.BRICK_STATS = []; %automatically set
  ainfo.BRICK_FLOAT_FACS = [];%automatically set
  ainfo.BRICK_LABS = [];
  ainfo.BRICK_KEYWORDS = [];
  OptOut.Scale = 0;
  OptOut.OverWrite= 'y';
  OptOut.verbose = 0;
  OptOut.Prefix = [ep2d_filename(1:strfind(ep2d_filename,'+')-1) '.pmu.SynPESTICA.RSS'];
  [err,ErrMessage,InfoOut]=WriteBrik(rmap,ainfo,OptOut);
end
